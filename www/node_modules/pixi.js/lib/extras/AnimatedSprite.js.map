{"version":3,"sources":["../../src/extras/AnimatedSprite.js"],"names":["core","AnimatedSprite","textures","autoUpdate","Texture","texture","_textures","_durations","_autoUpdate","animationSpeed","loop","onComplete","onFrameChange","_currentTime","playing","stop","ticker","shared","remove","update","play","add","UPDATE_PRIORITY","HIGH","gotoAndStop","frameNumber","previousFrame","currentFrame","updateTexture","gotoAndPlay","deltaTime","elapsed","lag","sign","Math","floor","length","_texture","_textureID","destroy","fromFrames","frames","i","push","fromFrame","fromImages","images","fromImage","value","time","Sprite"],"mappings":"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","file":"AnimatedSprite.js","sourcesContent":["import * as core from '../core';\n\n/**\n * @typedef FrameObject\n * @type {object}\n * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n * @property {number} time - the duration of the frame in ms\n */\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * let textureArray = [];\n *\n * for (let i=0; i < 4; i++)\n * {\n *      let texture = PIXI.Texture.fromImage(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * let mc = new PIXI.AnimatedSprite(textureArray);\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI.extras\n */\nexport default class AnimatedSprite extends core.Sprite\n{\n    /**\n     * @param {PIXI.Texture[]|FrameObject[]} textures - an array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation\n     * @param {boolean} [autoUpdate=true] - Whether use PIXI.ticker.shared to auto update animation time.\n     */\n    constructor(textures, autoUpdate)\n    {\n        super(textures[0] instanceof core.Texture ? textures[0] : textures[0].texture);\n\n        /**\n         * @private\n         */\n        this._textures = null;\n\n        /**\n         * @private\n         */\n        this._durations = null;\n\n        this.textures = textures;\n\n        /**\n         * `true` uses PIXI.ticker.shared to auto update animation time.\n         * @type {boolean}\n         * @default true\n         * @private\n         */\n        this._autoUpdate = autoUpdate !== false;\n\n        /**\n         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.animationSpeed = 1;\n\n        /**\n         * Whether or not the animate sprite repeats after playing.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.loop = true;\n\n        /**\n         * Function to call when a AnimatedSprite finishes playing\n         *\n         * @member {Function}\n         */\n        this.onComplete = null;\n\n        /**\n         * Function to call when a AnimatedSprite changes which texture is being rendered\n         *\n         * @member {Function}\n         */\n        this.onFrameChange = null;\n\n        /**\n         * Elapsed time since animation has been started, used internally to display current texture\n         *\n         * @member {number}\n         * @private\n         */\n        this._currentTime = 0;\n\n        /**\n         * Indicates if the AnimatedSprite is currently playing\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        this.playing = false;\n    }\n\n    /**\n     * Stops the AnimatedSprite\n     *\n     */\n    stop()\n    {\n        if (!this.playing)\n        {\n            return;\n        }\n\n        this.playing = false;\n        if (this._autoUpdate)\n        {\n            core.ticker.shared.remove(this.update, this);\n        }\n    }\n\n    /**\n     * Plays the AnimatedSprite\n     *\n     */\n    play()\n    {\n        if (this.playing)\n        {\n            return;\n        }\n\n        this.playing = true;\n        if (this._autoUpdate)\n        {\n            core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.HIGH);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame\n     *\n     * @param {number} frameNumber - frame index to stop at\n     */\n    gotoAndStop(frameNumber)\n    {\n        this.stop();\n\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite\n     *\n     * @param {number} frameNumber - frame index to start at\n     */\n    gotoAndPlay(frameNumber)\n    {\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n\n        this.play();\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     *\n     * @private\n     * @param {number} deltaTime - Time since last tick.\n     */\n    update(deltaTime)\n    {\n        const elapsed = this.animationSpeed * deltaTime;\n        const previousFrame = this.currentFrame;\n\n        if (this._durations !== null)\n        {\n            let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n\n            lag += elapsed / 60 * 1000;\n\n            while (lag < 0)\n            {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n\n            const sign = Math.sign(this.animationSpeed * deltaTime);\n\n            this._currentTime = Math.floor(this._currentTime);\n\n            while (lag >= this._durations[this.currentFrame])\n            {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else\n        {\n            this._currentTime += elapsed;\n        }\n\n        if (this._currentTime < 0 && !this.loop)\n        {\n            this.gotoAndStop(0);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop)\n        {\n            this.gotoAndStop(this._textures.length - 1);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Updates the displayed texture to match the current frame index\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        this._texture = this._textures[this.currentFrame];\n        this._textureID = -1;\n\n        if (this.onFrameChange)\n        {\n            this.onFrameChange(this.currentFrame);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and destroys it\n     *\n     */\n    destroy()\n    {\n        this.stop();\n        super.destroy();\n    }\n\n    /**\n     * A short hand way of creating a movieclip from an array of frame ids\n     *\n     * @static\n     * @param {string[]} frames - The array of frames ids the movieclip will use as its texture frames\n     * @return {AnimatedSprite} The new animated sprite with the specified frames.\n     */\n    static fromFrames(frames)\n    {\n        const textures = [];\n\n        for (let i = 0; i < frames.length; ++i)\n        {\n            textures.push(core.Texture.fromFrame(frames[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * A short hand way of creating a movieclip from an array of image ids\n     *\n     * @static\n     * @param {string[]} images - the array of image urls the movieclip will use as its texture frames\n     * @return {AnimatedSprite} The new animate sprite with the specified images as frames.\n     */\n    static fromImages(images)\n    {\n        const textures = [];\n\n        for (let i = 0; i < images.length; ++i)\n        {\n            textures.push(core.Texture.fromImage(images[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * totalFrames is the total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     *\n     * @readonly\n     * @member {number}\n     * @default 0\n     */\n    get totalFrames()\n    {\n        return this._textures.length;\n    }\n\n    /**\n     * The array of textures used for this AnimatedSprite\n     *\n     * @member {PIXI.Texture[]}\n     */\n    get textures()\n    {\n        return this._textures;\n    }\n\n    set textures(value) // eslint-disable-line require-jsdoc\n    {\n        if (value[0] instanceof core.Texture)\n        {\n            this._textures = value;\n            this._durations = null;\n        }\n        else\n        {\n            this._textures = [];\n            this._durations = [];\n\n            for (let i = 0; i < value.length; i++)\n            {\n                this._textures.push(value[i].texture);\n                this._durations.push(value[i].time);\n            }\n        }\n    }\n\n    /**\n    * The AnimatedSprites current frame index\n    *\n    * @member {number}\n    * @readonly\n    */\n    get currentFrame()\n    {\n        let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n\n        if (currentFrame < 0)\n        {\n            currentFrame += this._textures.length;\n        }\n\n        return currentFrame;\n    }\n}\n"]}